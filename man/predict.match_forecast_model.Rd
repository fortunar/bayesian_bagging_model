% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match_forecast.R
\name{predict.match_forecast_model}
\alias{predict.match_forecast_model}
\title{predict.match_forecast_model}
\usage{
\method{predict}{match_forecast_model}(mf_model, data_new, num_models,
  weighting = NULL, predict_fun, report_time = F)
}
\arguments{
\item{mf_model}{An instance of match_forecast_model}

\item{data_new}{\code{data.frame} or \code{data.table} with event data
 containing involved instance ID's.

 Example of columns for test set:
 \tabular{ccc}{\tab ID_1 \tab ID_2\cr }
 Note that the attributes of new events are unknown and are therefore estimated from
 data used for training. If you want to calculate attributes for instances in the test
 set from different data, set the \code{data} attribute of the match_forecast_model,
 after building it.}

\item{weighting}{Same as in \code{\link{match_forecast_model}}.}

\item{predict_fun}{Function that gets as an argument one of the bagged models and
transformed test data (e.g. using "means" transformation). It should use the ML model's
predict function to obtain the outcome of new events.}

\item{report_time}{Boolean denoting whether to report the execution time.}

\item{num_samples}{Specifies how many distributions are fitted to each
attribute of an instance.}
}
\value{
List of lists of predictions. The size of the outer list is \code{num_models * num_samples},
since each of the bagged models is predicting on each of the sampled test instances.
Each prediction (inner list) contains fields:
 \itemize{
 \item predictions: output of predict_fun for corresponding model and sampled test instance
 \item model: index of the bagged model
 \item num_of_sample: index of the sampled test instance
 }
}
\description{
Predict function for the match_forecast_model. Predicts the outcome for test
events using each of the bagged models built with match_forecast_model.
Instances from the test set modeled in the same way as instances in the train
set. For each event in the test set \code{num_samples} distributions are fitted
to each instance's attributes. This distribution is then transformed using the same
transformation (e.g. "means") to obtain final feature vectors.
}
\examples{
# Predict function to act on a single bagged model and a single sampled test data set obtained
# from instance models by applying a transformation function (e.g. means).
predict_fun <- function(model, data) {
  data$y <- NULL
  return(predict(model, newdata = data, type = "response"))
}

# Build 100 models for each of the instances in test set and
# call predict function from each of the bagged models from mf_model
# on each of the 100 datasets obtained by transformation function.
predict(
  mf_model,
  data_new = data_new,
  num_models = 100,
  predict_fun = predict_fun
)
}
