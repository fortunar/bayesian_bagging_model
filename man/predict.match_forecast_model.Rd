% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match_forecast.R
\name{predict.match_forecast_model}
\alias{predict.match_forecast_model}
\title{predict.match_forecast_model}
\usage{
\method{predict}{match_forecast_model}(mf_model, data_new, num_models = NULL,
  weighting = NULL, predict_fun, report_time = F)
}
\arguments{
\item{mf_model}{An instance of class match_forecast_model}

\item{data_new}{\code{data.frame} or \code{data.table} with match data
 containing involved object's ID's and possibly TIME attribute.

 Example of columns for test set:
 \tabular{ccc}{\tab TIME \tab ID_1 \tab ID_2\cr }
 Note that the exact attributes of objects in new events are unknown and are therefore
 estimated from data used for training.}

\item{num_models}{Optional parameter. If set, a different first level model is used for test
data set. Specifies how many distributions are fitted to each attribute of an object.
Analogous to \code{num_models} in \code{\link{match_forecast_model}}.}

\item{weighting}{Same as in \code{\link{match_forecast_model}}.}

\item{predict_fun}{Function that gets as an argument one of the bagged models and
transformed test data (e.g. using "means" transformation). It should use the ML model's
predict function to obtain the outcome of new events.}

\item{report_time}{Boolean denoting whether to report the execution time.}
}
\value{
List of lists of predictions. The size of the outer list is \code{num_models^2},
since each of the bagged models is predicting on each of the generated test vectors
Each prediction (inner list) contains fields:
 \itemize{
 \item predictions: output of predict_fun for corresponding model test vector
 \item idx_of_bagged_model: index of the bagged model
 \item idx_of_test_set: index of the test set
 }
}
\description{
Predict function for the match_forecast_model. Predicts the outcome for test
matches using each of the bagged predictive models built with match_forecast_model.
Unless a different \code{weighting} or \code{num_samples} is used for \code{predict}
and building the match_forecast_model, the same first level model is used to
construct test feature vectors.
}
\examples{
# Predict function to act on a single bagged model and a single sampled test data set obtained
# from instance models by applying a transformation function (e.g. means).
predict_fun <- function(model, data) {
  data$y <- NULL
  return(predict(model, newdata = data, type = "response"))
}

# This yields 100 * 100 predictions. It returns a list of lists 
# of predictions. Each prediction (list) contains fields:
# - predictions: output of predict_fun passed to this method
# - idx_of_bagged_model: index of the bagged model (in this case 1-100)
# - idx_of_test_set: index of test set generated by first level model (in this case 1-100)
predict(
  mf_model,
  data_new = data_new,
  predict_fun = predict_fun
)
}
