% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match_forecast.R
\name{match_forecast_model}
\alias{match_forecast_model}
\title{match_forecast_model}
\usage{
match_forecast_model(data, input_model_specification, num_models,
  transformation = NULL, weighting = NULL, get_model, priors = NULL,
  report_time = F)
}
\arguments{
\item{data}{\code{data.frame} or \code{data.table} in \strong{event-instance}
  format required by this package (also see details below). Columns have to
  include instance ID's in the format: \strong{ID_<number>} and attributes in
  the format \strong{<attr_name>_<number>}. <number> suffix connects
  instances to attributes. The suffixed number of corresponding instance and
  attributes should be the same. Column for the outcome (dependant variable)
  of the event needs to be denoted with \strong{y}. It can also include an
  attribute \strong{TIME}.

  An example of the columns for basketball data:
  \tabular{ccccccccc}{
   TIME \tab y \tab ID_1 \tab ID_2 \tab P2M_1 \tab P3M_1 \tab P2M_2 \tab P3M_2 \tab.. \cr
  }
  In the basketball case ID_1 refers to ID of the home team and P2M_1, P3M_1 to the
  attributes of the home team. ID_2 refers to the ID of away team and P2M_2, P3M_2 to its
  attributes. y is the outcome of the match.}

\item{input_model_specification}{Specifies the parametric assumptions of the
  attributes. We can model attributes of instances as independent with uivariate models or as
  dependent with multivariate models.

 Currently four univariate Bayesian models are supported: \itemize{
  \item Poisson (Poisson-Gamma model), appropriate for count data,
  see \code{\link{input_model_poisson}}
  \item Bernoulli (Bernoulli-Beta model), appropriate for binary data,
  see \code{\link{input_model_bernoulli}}
  \item Normal (Normal model with sample variance), appropriate for numeric data when
  modeling only mean, see \code{\link{input_model_normal}}
  \item normal (Normal-Inverse Gamma model), appropriate for jointly modeling mean and variance,
  see \code{\link{input_model_normal_ig}}
  }

  One multivariate Bayesian model is supported:
  Multivariate normal model with inverse Wishart prior for covariance matrix
  (see \code{\link{input_model_mvnormal_iw}}). It is appropriate for jointly modeling numeric
  attributes of instances. A custom model can also be used if a function is passed as
   \code{input_model_specification} parameter. See the source code of other input models
   for an example of how to write a custom model.

  \strong{How to invoke the models described above?}
  For independent Bayesian models a string or a list should be passed in as
  \code{input_model_specification} parameter. If it is a string, all attributes have the
  same parametric assumption. If it is a list, the keys need to correspond to
  columns (attributes) and values to parametric assumptions. If a list of
  name value pairs is used, different attributes can have different
  parametric assumptions. The strings corresponding to supported parametric assumptions described
  above are 'poisson', 'bernoulli', 'normal', 'normal_ig'. Multivariate normal model with
  inverse Wishart prior is invoked by passing in
  \code{input_model_specification = list(dependent = T, type = "mvnormal_iw")}.
  See examples below and input models linked above for more details.}

\item{num_models}{Number of distributions to obtain per attribute. Also matches the
number of resulting bagged ML models, since each bagged model is obtained on
one set of distributions.}

\item{transformation}{Specifies how attribute distributions are transformed
into actual features being fed into ML algorithm. For each of the parametric assumptions
mentioned above mean transformation is supported out of the box. It is invoked by
passing \code{transformation = "means"} as parameter. A custom function can also be
passed in. In this case it gets called for every instance with a list of distributions
that were fitted to instance attributes by the package. See the source code of
\code{\link{transform_data}} for more information.}

\item{weighting}{Optional parameter. A function that uses the \strong{TIME} attribute if
present to weight the prior events by importance when obtaining attribute
distributions.}

\item{get_model}{Function that takes as input a dataset generated by
\code{transformation} function and returns a ML model built using this
dataset. The ML model returned needs to support the standard predict()
notation.}

\item{priors}{Optional parameter. Specifies conjugate priors for supported Bayesian models.
List of lists, one for each instance. Keys in the outer list correspond to instance id's.
The values in the outer list correspond to specifications of prior distributions of attributes.
The values in the inner lists depend on the parametric assumption used. See the
documentation of supported parametric models for details on how to specify priors.}

\item{report_time}{Boolean denoting whether to report the execution time. Default is \code{FALSE}.}
}
\value{
Structure of class \code{match_forecast_model} containing
  properties:
  \itemize{
  \item models: list of length \code{num_models} with each entry being one of the bagged
  models
  \item data: data passed to input parameter (to be used to calculate distributions of
  attributes of test instances
  \item some other implicit parameters to avoid repetition
  }
}
\description{
Builds match_forecast_model to forecast match outcomes by performing bagging
using two level modeling. The approach takes into account the uncertainty in the inputs
to avoid overconfidence of ML models. Since the inputs to a match outcome prediction
problem are often uncertain the approach can enhance the predictive performance of ML models.
}
\details{
For detailed explanation see the introduction vignette by running:
\code{vignette("introduction", package = "matchForecast")}
}
\examples{
# Builds a logistic regression model on a single sampled train data set obtained
# from instance models by applying a transformation function (e.g. means).
get_model <- function(data) {
  return(glm(y ~ ., family = binomial(link = "logit"), data = data))
}

# Example of a prior specification (basketball example), for an attribute P3A,
# which is a Poisson variable and measures 3-point attempts. Conjugate prior
# for Poisson distribution is gamma distribution with parameters a - scale and
# b - rate
priors_example <- list(
  "San Antonio Spurs" =
    list(
      "P3A" = list(a = 241.2, b = 12.4),
      ...
    ),
  "Golden State Warriors" =
    list(
      "P3A" = list(a = 280.9, b = 13.2),
      ...
    ),
  ...
)

# Builds the Match Forecast Model
mf_model <- match_forecast_model(
  # Data frame in event-instance format
  data = data_train,
  # Parametric assumption about attributes
  input_model_specification = "poisson",
  # How many distributions to fit to each attribute
  num_models = 100,
  # How to build feature vectors from distributions
  transformation = "means",
  get_model = get_model,
  priors = priors_example
)
}
